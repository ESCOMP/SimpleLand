#!/usr/bin/env python3

"""
build slim ibrary
"""
import sys, os, time, filecmp

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")

_LIBDIR = os.path.join(_CIMEROOT, "CIME", "Tools")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.buildlib import parse_input
from CIME.build import get_standard_makefile_args
from CIME.case import Case
from CIME.utils import run_cmd, expect

logger = logging.getLogger(__name__)

###############################################################################
def _main_func():
###############################################################################

    caseroot, libroot, bldroot = parse_input(sys.argv)

    with Case(caseroot) as case:

        casetools = case.get_value("CASETOOLS")
        makefile = os.path.join(casetools, "Makefile")
        lnd_root = case.get_value("COMP_ROOT_DIR_LND")
        gmake_j = case.get_value("GMAKE_J")
        gmake = case.get_value("GMAKE")
        gmake_opts = get_standard_makefile_args(case)
        driver = case.get_value("COMP_INTERFACE").lower()
        nthrds = case.get_value("LND_NTHRDS")

        if ( nthrds > 1 ):
            expect(False, "LND_NTHRDS must be 1 as threading isn't implemented (see issue #14)" )

        #-------------------------------------------------------
        # create Filepath file
        #-------------------------------------------------------
        compname = case.get_value("COMP_LND")
        filepath_file = os.path.join(bldroot,"Filepath")
        if not os.path.isfile(filepath_file):
            caseroot = case.get_value("CASEROOT")
            expect( (compname == "slim"), "Unexpected COMP_LND name: %s" % (compname))
            paths = [os.path.join(caseroot,"SourceMods","src."+compname), 
                     os.path.join(lnd_root,"src","cpl",driver),
                     os.path.join(lnd_root,"src","main"),
                     os.path.join(lnd_root,"src","init_interp"),
                     os.path.join(lnd_root,"src","utils"),
                     os.path.join(lnd_root,"src","cpl"),
                     os.path.join(lnd_root,"src","cpl","utils")]

            if (driver == 'nuopc'):
                paths.append(os.path.join(lnd_root,"src","cpl","share_esmf"))

            # Paths needed to build the current system, but won't be long term
            paths.append( os.path.join(lnd_root,"src","biogeophys") )
            paths.append( os.path.join(lnd_root,"src","biogeochem") )
            paths.append( os.path.join(lnd_root,"src","soilbiogeochem") )

            with open(filepath_file, "w") as filepath:
                filepath.write("\n".join(paths))
                filepath.write("\n")
            
        #-------------------------------------------------------
        # create the library in libroot
        #-------------------------------------------------------

        complib = os.path.join(libroot,"lib%s.a"%(compname))
        makefile = os.path.join(casetools, "Makefile")
        macfile  = os.path.join(caseroot, "Macros.%s" % mach)

        cmd = "{} complib -j {} COMP_NAME={} COMPLIB={} -f {} {}" \
               .format(gmake, gmake_j, compname, complib, makefile, gmake_opts )

        rc, out, err = run_cmd(cmd)
        logger.info("%s: \n\n output:\n %s \n\n err:\n\n%s\n"%(cmd,out,err))
        expect(rc == 0, "Command %s failed with rc=%s" % (cmd, rc))

###############################################################################

if __name__ == "__main__":
    logger.warning( "WARNING: buildlib is being called as a program rather than a subroutine as " +
                    "it is expected to be in the CESM context" )
    _main_func()

